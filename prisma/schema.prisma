generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(uuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  Job           Job[]
  Action        Action[]
}

model VerificationRequest {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Company {
  id             String   @id @default(uuid())
  companyName    String?  @unique(map: "companyName") @db.VarChar(255)
  companyWebsite String?  @db.VarChar(255)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  jobs           Job[]    @relation("CompanyJobs")
}

model Job {
  id          String   @id @default(uuid())
  jobTitle    String?
  companyId   String?
  jobLocation String?
  jobLink     String?
  resumeLink  String?
  coverLink   String?
  jobWorkEnv  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  actions     Action[]
  companies   Company? @relation("CompanyJobs", fields: [companyId], references: [id])
}

model Action {
  id           String     @id @default(uuid())
  userId       String
  jobId        String
  actionTypeId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id])
  job          Job        @relation(fields: [jobId], references: [id])
  actionTypes  ActionType @relation(fields: [actionTypeId], references: [id])
}

model ActionType {
  id              String   @id @default(uuid())
  actionTypeTitle String?
  actionTypeDesc  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  actions         Action[]
}
